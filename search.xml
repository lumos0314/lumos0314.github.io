<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用Excel&Python做基本的数据处理]]></title>
    <url>%2F2020%2F06%2F02%2FExcel%26Python%2Findex%2F</url>
    <content type="text"><![CDATA[本文记录如何使用Excel+Python实现数据的读取、生成、计算、修改、统计、抽样、查找、可视化、存储等数据处理中的20个常用操作。(从早起Python公众号学习) —— 前言 数据读取说明：读取本地Excel数据 Excel Excel读取本地数据需要打开目标文件夹选中该文件并打开 Pandas Pandas支持读取本地Excel、txt文件，也支持从网页直接读取表格数据，只用一行代码即可，例如读取上述本地Excel数据可以使用:pd.read_excel(“示例数据.xlsx”) 数据生成说明：生成指定格式/数量的数据 Excel 以生成10*2的0—1均匀分布随机数矩阵为例，在Excel中需要使用rand()函数生成随机数，并手动拉取指定范围 Pandas 在Pandas中可以结合NumPy生成由指定随机数(均匀分布、正态分布等)生成的矩阵，例如同样生成10*2的0—1均匀分布随机数矩阵为，使用一行代码即可：pd.DataFrame(np.random.rand(10,2)) 数据存储说明：将表格中的数据存储至本地 Excel 在Excel中需要点击保存并设置格式/文件名 Pandas 在Pandas中可以使用pd.to_excel(“filename.xlsx”)来将当前工作表格保存至当前目录下，当然也可以使用to_csv保存为csv等其他格式，也可以使用绝对路径来指定保存位置 数据筛选说明：按照指定要求筛选数据 Excel 使用我们之前的示例数据，在Excel中筛选出薪资大于8000的数据步骤如下：「选中一列 - 数据 - 筛选 - 大于 - 8000」 Pandas 在Pandas中，可直接对数据框进行条件筛选，例如同样进行单个条件(薪资大于5000)的筛选可以使用df[df[‘薪资水平’]&gt;5000]，如果使用多个条件的筛选只需要使用&amp;(并)与|(或)操作符实现 数据插入说明：在指定位置插入指定数据 Excel 在Excel中我们可以将光标放在指定位置并右键增加一行/列，当然也可以在添加时对数据进行一些计算，比如我们就可以使用IF函数(=IF(G2&gt;10000,”高”,”低”))，将薪资大于10000的设为高，低于10000的设为低，添加一列在最后 Pandas 在pandas中，如果不借助自定义函数的话，我们可以使用cut方法来实现同样操作 数据删除说明：删除指定行/列/单元格 Excel 在Excel删除数据十分简单，找到需要删除的数据右键删除即可，比如删除刚刚生成的最后一列 Pandas 在pandas中删除数据也很简单，比如删除最后一列使用del df[‘new_col’]即可 数据排序说明：按照指定要求对数据排序 Excel 在Excel中可以点击排序按钮进行排序，例如将示例数据按照薪资从高到低进行排序可以按照下面的步骤进行 Pandas 在pandas中可以使用sort_values进行排序，使用ascending来控制升降序，例如将示例数据按照薪资从高到低进行排序可以使用df.sort_values(“薪资水平”,ascending=False,inplace=True) 缺失值处理说明：对缺失值(空值)按照指定要求处理 Excel 在Excel中可以按照查找—&gt;定位条件—&gt;空值来快速定位数据中的空值，接着可以自己定义缺失值的填充方式，比如将缺失值用上一个数据进行填充「选中一列 - 编辑 - 查找 - 查找内容 - 搜索（按列） - 查找范围 - 值」 Pandas 在pandas中可以使用data.isnull().sum()来检查缺失值，之后可以使用多种方法来填充或者删除缺失值，比如我们可以使用df = df.fillna(axis=0,method=’ffill’)来横向/纵向用缺失值前面的值替换缺失值 数据去重说明：对重复值按照指定要求处理 Excel 在Excel中可以通过点击数据—&gt;删除重复值按钮并选择需要去重的列即可，例如对示例数据按照创建时间列进行去重。从本实例开始，导入”示例数据2.xlsx” Pandas 在pandas中可以使用drop_duplicates来对数据进行去重，并且可以指定列以及保留顺序，例如对示例数据按照创建时间列进行去重df.drop_duplicates([‘创建时间’],inplace=True)。 格式修改说明：修改指定数据的格式 Excel 在Excel中可以选中需要转换格式的数据之后右键—&gt;修改单元格格式来选择我们需要的格式 Pandas 在Pandas中没有一个固定修改格式的方法，不同的数据格式有着不同的修改方法，比如类似Excel中将创建时间修改为年-月-日可以使用df[‘创建时间’] = df[‘创建时间’].dt.strftime(‘%Y-%m-%d’) 数据交换说明：交换指定数据 Excel 在Excel中交换数据是很常用的操作，以交换示例数据中地址与岗位两列为例，可以选中地址列，按住shift键并拖动边缘至下一列松开即可 Pandas 在pandas中交换两列也有很多方法，以交换示例数据中地址与岗位两列为例，可以通过修改列号来实现 数据合并说明：将两列或多列数据合并成一列 Excel 在Excel中可以使用公式也可以使用Ctrl+E快捷键完成多列合并，以公式为例，合并示例数据中的地址+岗位列步骤如下注意：公式中要使用&amp;，而不是+；（+用来做数值运算） Pandas 在Pandas中合并多列比较简单，类似于之前的数据插入操作，例如合并示例数据中的地址+岗位列使用df[‘合并列’] = df[‘地址’] + df[‘岗位’] 数据拆分说明：将一列按照规则拆分为多列 Excel 在Excel中可以通过点击数据—&gt;分列并按照提示的选项设置相关参数完成分列，但是由于该列含有[]等特殊字符，所以需要先使用查找替换去掉 Pandas 在Pandas中可以使用.split来完成分列，但是在分列完毕后需要使用merge来将分列完的数据添加至原DataFrame，对于分列完的数据含有[]字符，我们可以使用正则或者字符串lstrip方法进行处理，但因不是pandas特性，此处不再展开。 数据分组说明：对数据进行分组计算 Excel 在Excel中对数据进行分组计算需要先对需要分组的字段进行排序，之后可以通过点击分类汇总并设置相关参数完成，比如对示例数据的学历进行分组并求不同学历的平均薪资 Pandas 在Pandas中对数据进行分组计算可以使用groupby轻松搞定，比如使用df.groupby(“学历”).mean()一行代码即可对示例数据的学历进行分组并求不同学历的平均薪资，结果与Excel一致 数据计算说明：对数据进行一些计算 Excel 在Excel中有很多计算相关的公式，比如可以使用COUNTIFS来统计薪资大于10000的岗位数量有518个 Pandas 在Pandas中可以直接使用类似数据筛选的方法来统计薪资大于10000的岗位数量len(df[df[“薪资水平”]&gt;10000]) 数据统计说明：对数据进行一些统计计算 Excel 在Excel中有很多统计相关的公式，也有现成的分析工具，比如对薪资水平列进行描述性统计分析，可以通过添加工具库之后点击数据分析按钮并设置相关参 Pandas 在pandas中也有现成的函数describe快速完成对数据的描述性统计，比如使用df[“薪资水平”].describe()即可得到薪资列的描述性统计结果 数据可视化说明：对数据进行可视化 Excel 在Excel中可以通过点击插入并选择图表来快速完成对数据的可视化，比如制作薪资的直方图，并且有很多样式可以直接使用 Pandas 在Pandas中也支持直接对数据绘制不同可视化图表，例如直方图，可以使用plot或者直接使用hist来制作df[“薪资水平”].hist() 数据抽样说明：对数据按要求采样 Excel 在Excel中抽样可以使用公式也可以使用分析工具库中的抽样，但是仅支持对数值型的列抽样，比如随机抽20个示例数据中薪资的样本 Pandas 在pandas中有抽样函数sample可以直接抽样，并且支持任意格式的数据抽样，可以按照数量/比例抽样，比如随机抽20个示例数据中的样本 数据透视表说明：制作数据透视表 Excel 数据透视表是一个非常强大的工具，在Excel中有现成的工具，只需要选中数据—&gt;点击插入—&gt;数据透视表即可生成，并且支持字段的拖取实现不同的透视表，非常方便，比如制作地址、学历、薪资的透视表 Pandas 在Pandas中制作数据透视表可以使用pivot_table函数，例如制作地址、学历、薪资的透视表pd.pivot_table(df,index=[“地址”,”学历”],values=[“薪资水平”])，虽然结果一样，但是并没有Excel一样方便调整与多样 vlookup说明：利用VLOOKUP查找数据 Excel VLOOKUP算是EXCEL中最核心的功能之一了，我们用一个简单的数据来进行示例 Pandas 在Pandas中没有现成的vlookup函数，所以实现匹配查找需要一些步骤，首先我们读取该表格 接着将该dataframe切分为两个 接着将该dataframe切分为两个 结束语以上就是使用Pandas来演示如何实现Excel中的常用操作的全部过程，其实可以发现Excel的优点就是大多由交互式的点击完成数据处理，而Pandas则完全依赖于代码，对于有些操作比如数据透视表，用Excel制作更加方便，而有些操作比如数据的分组、计算等，因Pandas可以与NumPy等其他优秀的Python库结合而显得更加强大，所以我们在处理数据时也需要正确选择使用的工具！(从早起Python公众号学习)]]></content>
      <categories>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《OKR工作法》思维导图]]></title>
    <url>%2F2020%2F05%2F02%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8AOKR%E5%B7%A5%E4%BD%9C%E6%B3%95%E3%80%8B%2Findex%2F</url>
    <content type="text"><![CDATA[在这里，O表示目标(Objective)，KR表示示关键结果(Key Results)。目标就是你想做什么事情，(比如上线一款游戏)，关键结果就是如何确认你做到了这件事，(比如一天2.5万下载量或一天5万美元收入)，按照年度、季度设置OKR都可以，但一定要关联上公司的愿景使命。有挑战的目标能激发团队的斗志，明确的关键结果又会让大家觉得这不是空谈。如果你发现一起床就有做事的激情，说明你设置了一个好的目标；如果你看到关键结果时有点担心，那这个关键结果的设置就是恰当的。 —— 引自章节：前言 《OKR工作法》思维导图 《OKR工作法》读书笔记整理大纲一、什么是OKR工作OKR的名词解释： Objectives 目标 Key Results 关键结果 OKR的本质 OKR是一种战略目标任务体系，是一套明确目标并跟踪其完成情况的管理工具和方法。 OKR由一个需要极致聚焦的明确目标和量化该目标的数个关键结果这两大主要部分组成。 二、如何设定一个好的OKR一个好的OKR是什么样的？ 如果你发现一起床就有做事的激情，说明你设置了一个好的目标； 如果你看到关键结果时有点担心，那这个关键结果的设置就是恰当的。 一个好的OKR的目标必须是可衡量的，是有挑战性却又不至于让人绝望， 对于完成它，你们大约抱有50%左右的信心。 如何设定OKR? 1.在设定OKR之前，先明确你的或企业的使命。 2.先设定公司层面的OKR，然后才是部门的OKR、个人OKR。 3.设定一个必须是有挑战性的目标，如果不是有多条产品线的，目标最好不要多于1个。 4.自上而下搜集员工认为公司目前最应该聚焦的目标。 5.召集高管开会，将衙门提出的备选目标与员工的放在一起，会上集体过一遍，最终投票选出目标。 6.设定好目标后，针对目标设置3-4个能衡量目标是否实现的关键结果。 7.设定好关键结果后，给每个关键结果设定一个初始信心指数 --即你们预估完成这一关键结果的概率为多少，初始值一般建议都为50%,并在今后的OKR运行中跟踪这一数字。 设定OKR目标的3个原则 1.目标要明确方向且鼓舞人心 2.目标要有时间期限，有确定的截止日期更有助于目标实现 3.由独立的团队来实现目标，即执行的主体必须清清楚楚 三、如何运行你的OKR执行前的心理建设 掌握“承担责任-庆祝结果”的节奏 每周一，团队一起开会盘点OKR，来明确本周具体负责完成哪些任务。 每周五，召开“胜利会议”，让每个团队都可以展示本周的工作成果，并准备一些酒水饮料和点心等庆祝这些成果。 易造成目标无法达成的5个要素 1.设置多个目标但没有给目标设定优先级 2.缺乏沟通，导致团队其他成员没能准确理解目标 3.没有做好具体落实目标的计划，只是空谈目标 4.没有吧时间花在重要的事情上，而去做了许多偏离目标的事情 5.轻易放弃]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>XMind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《心流》思维导图]]></title>
    <url>%2F2020%2F05%2F01%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%BF%83%E6%B5%81%E3%80%8B%2Findex%2F</url>
    <content type="text"><![CDATA[“很多人一离开校门就不再学习，因为一二十年受外界强迫的学生生涯留下了许多不愉快的回忆。他们长期受老师和教科书操纵，毕业的那天就是他们的自由之日。 但放弃运用象征技巧的人永远不可能获得真正的自由。他的思考会受邻居、报纸社论、电视节目所左右，他会被专家学者牵着鼻子走。在理想状况下，强迫教育的结束应该就是自动自发追求更高教育的开始。这时，学习的目标不再是分数、文凭或找份好工作。而是了解周遭的事物，从个人经验中发掘意义，建构价值观，思考者会从这里面找到深邃的乐趣。” —— 引自第247页 《心流》思维导图 《心流》读书笔记整理大纲：1. 人何时最幸福？人类不满的根源:内在秩序的缺失 最优体验和心流是幸福的代名词 佛洛依德“本我”“超我”“自我” 2. 意识的运作方式意识 意图 注意力 自我 精神熵 最优体验（精神负熵） 3. 心流的构成要素具挑战性的活动 知行合一 明确目标与及时反馈 全神贯注 掌握自如 浑然忘我 时间感异常 4. 在日常生活中寻找心流4.1 工作之乐心理体验抽样法：工作心流&gt;休闲心流 如何像玩一样工作？ 有效使用闲暇时间 4.2 人际之乐如何面对孤独决定你的独处质量 将家庭生活转化为心流 必须通过独特化与整合 保持沟通渠道畅通 挑战与技巧的畅通 胸怀大我 4.3 思维之乐4.4 感官之乐]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>XMind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《增长黑客》思维导图]]></title>
    <url>%2F2020%2F04%2F27%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E3%80%8B%2Findex%2F</url>
    <content type="text"><![CDATA[“AARRR”转化漏斗模型，即： Acquisition(获取用户)、Activation(激发活跃)、 Retention(提高留存)、 Revenue(增加收入)、 Referral(传播推荐)。当我评估一家公司的商业蓝图时， 是否懂得运用黑客增长术会与如何研发产品服务视为同等重要。 —— 引自第2页 《增长黑客》思维导图 《增长黑客》读书笔记整理大纲一、增长黑客的概念增长黑客是硅谷当下热门的新商业方法论。 增长黑客是指通过创造性的方法、科学的数据分析工具，可以用极地的费用在短时间内吸引数以百万计的用户的增长的方法。 它是一种依赖技术新渠道、大数据与数据分析来实现快速测试产品开发&amp;影响新想法，并利用用户行为数据验证或寻求演进的科学方法。 二、增长黑客的方法论2.1 搭建跨部门合作的增长团队人员构成 增长负责人 产品经理 营销专员 数据分析师 产品设计师 其他必要的准备 团队负责人需要向公司管理层直接汇报工作的汇报制度与通道 增长工作必须获得高层强有力的支持 2.2 确保产品本身是个好产品不可或缺性调查：在用户心中不可或缺的概率大于等于40% 客户留存率调查：可以参考同行内有足够可比性的成功产品的情况 找到你的产品或服务令用户眼前一亮，发现它对自己的价值的“啊哈时刻” 深挖数据，跟踪活跃用户行为，以数据为依据，适当做出调整 2.3 确定增长杠杆与北极星指标根据自己企业的行为与特点找出与增长相关的所有关键因素，建立你自己的基本增长等式 在所有这些关键因素中，找出哪一个变量最能反映你产品的不可或缺体验的实现情况，将它设定为北极星指标，时时关注这个指标以此来保证自己没有偏离方向 整合数据资源：你需要简历统一的数据仓库，花费必要的时间收集数据并配备恰当的分析能力；需要能跟踪每一个用户从第一次访问到经历“啊哈时刻”或者到弃用产品的整个过程 2.4 进入快节奏实验的循环试验想法的准备：试验想法包含想法名称、想法描述、假设待测指标；集思广益，收集团队内外的各种建议来改善试验想法；提交想法时，提交者应根据ICE评分体系给出该想法的评分，帮助团队在排定优先级时更好地做出决定，评过分的想法才能进入试验想法储备库 无论测试的是产品的哪个方面，这一循环中的每个步骤都应保持固定的节奏，以每一两周完成一次循环为佳 增长团队应每周召开一次1小时左右的会议以审视实验结果并决定下一周要执行的试验 三、增长黑客的技巧四种类型的增长试验 获客：实现营销语言、营销渠道与市场的匹配 激活：让潜在用户真正使用你的产品 留存：唤醒并留住用户 变现：提高每位用户带来的收益 避免增长停滞的良性循环 对增长保持关注，持续关注用户满意度，并积极地发现用户不满的早期迹象。 与鲨鱼为伍：时刻保持警惕，避免陷入自满和懈怠，像最初一样坚持落实增长黑客的循环节奏。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>XMind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《深度工作》思维导图]]></title>
    <url>%2F2020%2F04%2F20%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E6%B7%B1%E5%BA%A6%E5%B7%A5%E4%BD%9C%E3%80%8B%2Findex%2F</url>
    <content type="text"><![CDATA[想要迅速掌握困难的事物，你必须高度专注，不能有任何干扰。最小阻力原则：在工作环境上，若各种行为对于底线的影响没有得到明确的反馈意见，我们倾向于采用当下最简单易行的行为。它受到度量黑洞的保护，少有人对其加以审视，在这种原则支配下的工作文化，免去了我们短期内保持专注和做计划的忧虑，却牺牲了长期的满足感和真实价值的产出。我们的大脑是根据我们关注的事物来构建世界观的。一个人的身体或大脑在自觉努力完成某项艰难且有价值的工作过程中达到极限时，往往是最优体验发生的时候。 —— 引自第1页 《深度工作》思维导图 《深度工作》读书笔记整理大纲一、认识深度工作相关概念 深度工作 浮浅工作 深度工作假设 新经济形势下取得成功的三类人 高技术工作：善用智能机器且具创造性 超级明星：行业尖子 所有者：拥有资本 新经济形势下赢家的两种核心能力 迅速掌握复杂工具的能力 达到精英水平 深度工作的重要性 助你迅速掌握困难事物 助你实现精英级产出 降低深度工作的思维定式和偏见 最小阻力原则：浮浅工作更简单 （案例：频繁召开例会） 忙碌代表生产力：围绕浮浅工作表面忙碌 对互联网顶礼膜拜：认为与“网络”相关都是好的 论证深度工作是有意义的 神经学角度论证：以熟练掌握注意力改善人生体验 心理学角度论证：心流理论和印证深度工作让人更有价值 哲学角度论证：拥抱深度工作，使人有价值感和意义 （工匠的神圣感） 二、践行深度工作的4个原则6个策略 （工作要深入）选定你的深度哲学 禁欲主义哲学：摒弃或最小化浮浅职责，实现深度工作最大化 双峰哲学：将时间分成两块，分别用于深度工作和其他 节奏哲学：将深度工作转化为常规习惯 新闻记者哲学：随时可插入深度工作 习惯化 （查尔斯达尔文严格内化的习惯） 要有大手笔 （J.K.罗琳写作《死亡圣器》入驻五星酒店） 不要独自工作、在恰当时机采用协作方式 像经商一样执行：4个原则 关注极端重要的事 抓住引领性指标 准备醒目计分板 定期问责 定期放松大脑有助深度工作 （图安逸） 4个策略 （拥抱无聊，克服分心） 计划网络使用时间，严格执行 （忌不断分心，要不断专注） 高强度工作，高效利用时间 （像罗斯福一样工作） 案例：作者在上下班途中冥想 （利用本可能被浪费的时间）（有成果的冥想） 美国记忆力冠军罗恩怀特的记牌敲门 （记住一副牌） 3个策略 （远离社交媒体） 将时间花在高影响力的活动上 （采用关键少数法则） 戒掉社交媒体 高质量活动替代 （不要用网络来消遣） 5个策略 （砍掉浮浅工作） 置顶日程计划，允许突发性改变或主动寻求改变 （做好一天的计划） 明确活动深浅度，倾注于深度工作 （定量分析每项活动的深度） 设置浮浅工作时间 （向老板申请浮浅工作预算） 案例：作者实行固定日程生产力 （设置工作时间上限）（5点半之前结束工作） 掌握电子通讯控制权 （变得不容易联系到）]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>XMind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Object-Oriented Design UML]]></title>
    <url>%2F2020%2F02%2F06%2Food_uml%2Findex%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Special Game - by Python3]]></title>
    <url>%2F2020%2F02%2F01%2Fpython_game%2Findex%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Excelsior Plan]]></title>
    <url>%2F2019%2F09%2F04%2FGOAT%2Findex%2F</url>
    <content type="text"><![CDATA[One Year Study and Life Plan #Useful Links# #人生可持续发展规划# #Some Flags🚩# #规律作息# #健康生活方式# #19/20 MSc Electronic and Computer Engineering, University of Birmingham, England, UK# 自律•养生•修仙•健康•习惯1、invisalign牙套毕业-坚持到第47副牙套2、塑形健身：减掉小肚子、练出肌肉💪-坚持去健身房3、改善形体：预防颈椎病、消除高低肩、预防腰间盘突出：猫式坐姿&amp;不跷二郎腿、缓解骨盆前倾-瑜伽垫上勤练习4、戒糖：不喝奶茶、少吃甜食-一杯都不买5、拥有不错的厨艺：比如会做?道菜-练习6、毕业👩‍🎓时取得好成绩：课前预习、课后复习讲义等-学习态度端正7、美白护肤-坚持使用化妆品8、坚持记账-鲨鱼记账app用起来9、可以用流利的英文交流10、看一场球赛11、听一场演唱会]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>🚩Flag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「TED:为什么舒适会毁了你的生活」]]></title>
    <url>%2F2019%2F08%2F03%2FTED%E8%BF%9C%E7%A6%BB%E8%88%92%E9%80%82%2Findex%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>TED</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何长时间高效学习？]]></title>
    <url>%2F2019%2F07%2F12%2F%E7%9F%A5%E4%B9%8Elive%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%A6%82%E4%BD%95%E9%95%BF%E6%97%B6%E9%97%B4%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%EF%BC%9F%2Findex%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>知乎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[友邻优课「每日外刊精读计划」]]></title>
    <url>%2F2019%2F07%2F12%2F%E5%8F%8B%E9%82%BB%E4%BC%98%E8%AF%BE%2Findex%2F</url>
    <content type="text"><![CDATA[今天是友邻优课每日外刊精读的Day1，毕业前就把“假期好好学英语”这个计划提上日程了！本文作为我学习此课程过程中的线上笔记本，我会每日更新当天的笔记，方便我睡前翻看~ 写在前面我很熟悉线上英语付费课程的运营模式，所以当我：关注友邻优课的公众号-报名每日外刊精读课程并付费-添加老师微信-收到老师开课提醒-收到老师链接邀请入群-开始在APP上的第一次学习时，不禁回想起我成为52期薄荷阅读奇迹男孩课程老师Edward的第一天…..日常感慨：日子过得好快啊😏 学习目的自从4月20日从bcz离职后，就再没碰过英语了，自身英语功力退步的同时😂 在pyq看到不少人提前去🇬🇧读语言班了🌚 害怕自己去了英国之后跟不上呀，于是报名友邻优课跟着每天精读外刊：1、不花钱是根本没动力学习啊（坚持学习80天/共100天可全额退款）；2、能帮助我养成 坚持每天学点儿英语 的习惯啊！ 学习方法考过四六级、托福、雅思的我：英语学习体系已经基本形成了！（骄傲脸-_-） 像我这么懒的人在学习英语的过程中，研究琢磨出了适合自己（懒人）的学习方法：在学习英语时，同一时间内调动各种能调用的器官！耳朵听、眼睛看、动手写、嘴巴说。这样的学习方式相当于在同一时间内重复了四遍！重复的次数越多记忆效果越好，就能逐渐就培养出语感了… 通过对本次课程学习材料的分析，制定了有针对性的训练计划，具体如下： 1、（刷牙洗脸护肤洗澡吃饭无聊时）打开YLYK的App播放「讲解版」：就是中文为主混杂英文的那种对阅读材料的讲解（泛听：对当天学习内容有个大体了解 2、切换到「朗读版」开始循环播放（看着阅读材料进行影子跟读：比音频慢半拍跟读且不按暂停，读得卡顿的地方就是不熟不会的，在随后几遍的跟读过程中要留意这些地方 3、看「讲解版」文字部分的解析，如有的单词短语没有解析就自己查词典，解决掉影子跟读时不会和不熟的单词和短语 4、再切换回「朗读版」开始循环播放（尝试脱离阅读材料进行影子跟读，直到完全不看阅读材料就能全文影子跟读 5、整理记录当天学到的不会和不熟的单词短语以及好的句式结构 学习笔记用以上的学习方法坚持学习「每日精读外刊」，在下面记录笔记：]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>友邻优课</tag>
        <tag>每日外刊精读计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「“笨方法”学Python 3」第四篇]]></title>
    <url>%2F2019%2F07%2F10%2Fpython4%2Findex%2F</url>
    <content type="text"><![CDATA[习题31 做出决定1234567891011121314151617181920212223242526272829303132333435363738print("""You enter a dark room with two doors,Do you go through door #1 or door #2?""")door = input("&gt; ")if door == "1": print("There's a giant bear here eating a cheese cake. ") print("What do you do? ") print("1. Take the cake. ") print("2. Scream at the bear. ") bear = input("&gt; ") if bear == "1": print("The bear eats your face off. Good job! ") elif bear == "2": print("The bear eats your leggs off. Good job! ") else: print(f"Well, doing &#123;bear&#125; is probably better. ") print("Bear runs away. ")elif door == "2": print(" You stare into the endless abyss at Cthulhu's retina.") print("1. Blueberries. ") print("2. Yellow jacket clothespins. ") print("3. Understanding revolves yelling melodies. ") insantity = input("&gt; ") if insantity == "1" or insantity == 2: print("Your body survives powered by a mind of jello. ") print("Good job! ") else: print("The insantity rots your eyes into a pool of muck. ") print("Good job! ")else: print("You stumblr around and fall on a knife and die. Good job! ") 习题32 循环和列表12345678910111213141516171819202122the_count = [1,2,3,4,5]fruits = ['apple', 'oranges', 'pears', 'apricots']change = [1,'pennies', 2, 'dimes', 3 , 'quarters']for number in the_count: print(f"This is count &#123;number&#125;")for fruit in fruits: print(f"A fruit of type : &#123;fruit&#125;")for i in change: print(f"I got &#123;i&#125;")elements = []for i in range(0, 6): print(f"Adding &#123;i&#125; to the list. ") elements.append(i)for i in elements: print(f"Element was : &#123;i&#125;") 习题33 while循环123456789101112131415i = 0numbers = []while i &lt; 6 : print(f"At the top i is &#123;i&#125; ") numbers.append(i) i += 1 print("Numbers now : ", numbers) print(f"At the bottom i is &#123;i&#125; ")print("The numbers: ")for num in numbers: print(num) 习题34 访问列表的元素123#animals = ['bear','tiger','penguine','zebra']#bear = animals[0]#访问列表里的第一个元素 习题35 分支和函数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677from sys import exitdef gold_room():print("This room is full of gold. How much do you take? ")choice = input("&gt; ")if "0" in choice or "1" in choices:how_much = int(choice)else:dead("Man, learn to type a number. ")if how_much &lt; 50:print("Nice, you're not greedy, you win! ")exit(0)else:dead("You greedy bastard!")def bear_room():print("There is a bear here. ")print("The bear has a bunch of another door. ")print("The fat bear is in front of another door. ")print("How are you going to move the bear? ")bear_moved = Falsewhile True:choice = input("&gt; ")if choice == "take money":dead("The bear looks at you then slaps your face off. ")elif choice == "taunt bear" and not bear_moved:print("The bear has moved from the door. ")print("You can go through it now. ")bear_moved = Trueelif choice == "taunt bear" and bear_moved:dead("The bear gets pissed off and chews your leggs off. ")elif choice == "open door" and bear_moved:gold_room()else :print("I got no idea what that means. ")def cthulhu_room():print("Here you see the great evil Cthulhu. ")print("He, it , whatever stares at you and you go insane. ")print("Do you flee for your life or eat your head? ")choice = input("&gt; ")if "flee" in choice:start()elif "head" in choice:dead("Well that was tasty! ")else:cthulhu_room()def dead(why):print(why, "Good job! ")exit(0)def start():print("You are in a dark room. ")print("There is a door to your right and left. ")print("Which one do you take? ")choice = input("&gt; ")if choice == "left":bear_room()elif choice == "right":cthulhu_room()else:dead("You stumble around the room until you starve. ")start() 习题36 设计和调试12 习题37 复习各种符号12 习题38 列表的操作12345678910111213141516171819202122ten_things = "Apples Oranges Crows Telephone Light Sugar"print("Wait there are not 10 things in that list. Let's fix that. ")stuff = ten_things.split(' ')more_stuff = ["Day", "Night", "Song" ,"Frisbee", "Corn", "Banana", "Girl", "Boy"]while len(stuff) != 10:next_one = more_stuff.pop(0)print("Adding: ",next_one)stuff.append(next_one)print(f"There are &#123;len(stuff)&#125; items now. ")print("There we go: ", stuff)print("Let's do some things with stuff. ")print(stuff[1])print(stuff[-1])print(stuff.pop())print(' '.join(stuff))print('#'.join(stuff[3:5])) 习题39 字典，可爱的字典123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051states = &#123;'Oregon':'OR','Florida':'FL','California':'CA','New York':'NY','Michigan':'MI'&#125;cities = &#123;'CA': 'San Francisco','MI':'Detroit','FL':'Jacksonville'&#125;cities['NY'] = 'New York'cities['OR'] = 'Fortland'print('-' * 10)print('NY State has:', cities['NY'])print("OR State has:", cities['OR'])print('-' * 10)print("Michigan's abbrevition is: ", states['Michigan'] )print("Florida's abbrevition is: ", states['Florida'])print('-' * 10)print("Michigan's has: ", cities[states['Michigan']] )print("Florida's has: ", cities[states['Florida']])print('-' * 10)for state, abbrev in list(states.items()):print(f"&#123;state&#125; is abbrevited &#123;abbrev&#125;")print('-' * 10)for abbrev, city in list(cities.items()):print(f"&#123;abbrev&#125; has the city &#123;city&#125;")print('-' * 10)for state, abbrev in list(states.items()):print(f"&#123;state&#125; state is abbrevited &#123;abbrev&#125;")print(f"and has city &#123;cities[abbrev]&#125;")print('-' * 10)state = states.get('Texas')if not state:print("Sorry, no Texas.")city = cities.get('Tx','Does Not Exist')print(f"The city for the state 'TX' is: &#123;city&#125;") 习题40 模块、类和对象class Song(object): def __init__(self, lyrics): self.lyrics = lyrics def sing_me_a_song(self): for line in self.lryics: print(line) happy_bday = Song(["Happy birthday to you", "I don't want to get sued", "So I'll stop right there"]) bulls_on_parade = Song(["They rally aroud the family", "With pockets full of shells"]) happy_bday.sing_me_a_song() bulls_on_parade.sing_me_a_song() # __init__ 左右下划线是两个]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>“笨方法”学Python 3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「TED:滚蛋吧！小情绪」]]></title>
    <url>%2F2019%2F07%2F08%2FTED%E6%BB%9A%E8%9B%8B%E5%90%A7%E5%B0%8F%E6%83%85%E7%BB%AA%2Findex%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>TED</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「“笨方法”学Python 3」第三篇]]></title>
    <url>%2F2019%2F07%2F07%2Fpython3%2Findex%2F</url>
    <content type="text"><![CDATA[习题21 函数可以返回某些东西123456789101112131415161718192021222324252627282930def add(a, b):print(f"ADDING &#123;a&#125; + &#123;b&#125;")return a + bdef substract(a, b):print(f"SUBSTRACTING &#123;a&#125; - &#123;b&#125;")return a - bdef multiply(a, b):print(f"MULTIPLYING &#123;a&#125; * &#123;b&#125;")return a * bdef divide(a, b):print(f"DIVIDING &#123;a&#125; / &#123;b&#125; ")return a / bprint("Let's do some math with just functions! ")age = add(30, 5)height = substract(78, 4)weight = multiply(90 , 2)iq = divide(100, 2)print(f"Age:&#123;age&#125;, Height:&#123;height&#125;, Weight:&#123;weight&#125;, Iq:&#123;iq&#125;")print("Here is a puzzle.")what = add(age, substract(height, multiply(weight,divide(iq, 2)))) #从里到外print("That's becomes: ", what , "Can u do it by hand? ") 习题22 到现在为止你都学到了什么123#回顾之前遇到的每一个词和每一个符号 #说明他们的作用 #做一份列表 习题23 字符串、字节串和字符编码12345678910111213141516171819import sysscript, encoding, error = sys.argvdef main(language_file, encoding, errors): line = language_file.readline() if line: print_line(line, encoding, errors) return main(language_file, encoding, error)def print_line(line, encoding, errors): next_lang = line.strip() raw_bytes = next_lang.encode(encoding, errors = errors) cooked_string =raw_bytes.decode(encoding,errors = errors)print(raw_bytes, "&lt;===&gt;",cooked_string)languages = open("languages.txt", encoding = "utf-8")main(languages, encoding, error) 习题24 更多的练习12345678910111213141516171819202122232425262728293031323334353637383940print("Let's practice everything. ")print('You\'d need to know \'bout escapes with \\ that do:') #\后分别显示‘ ’ \print('\n newlines and \t tabs. ') #换行和水平制表，注意\n后面有个空格poem = """ #'''和下一行不在同一行，因此这一行有个空格\tThe lovely worldwith logic so firmly plantedcannot discern \n the needs of lovenor comprehand passion from intuitionand requires an expanation\n\t\twhere there is none."""print("-----------")print(poem)print("-----------")five = 10 - 2 + 3 - 6print(f"This should be five: &#123;five&#125;")def secret_formula(started):jelly_beans = started * 500jars = jelly_beans / 1000crates = jars / 100return jelly_beans, jars , cratesstart_point = 10000beans , jars, crates = secret_formula(start_point)print("With a staring point of: &#123;&#125;".format(start_point)) #调用方法，方法里有参数print(f"We'd have &#123;beans&#125;, &#123;jars&#125; jars, and &#123;crates&#125; crates. ")start_point = start_point / 10print("We can also do that this way:")formula = secret_formula(start_point)print("We'd have &#123;&#125; beans , &#123;&#125;jars, and &#123;&#125; crates.".format(*formula)) #因为函数有返回值 习题25 更多更多的练习12345678910111213141516171819202122232425262728293031323334353637383940print("Let's practice everything. ")print('You\'d need to know \'bout escapes with \\ that do:') #\后分别显示‘ ’ \print('\n newlines and \t tabs. ') #换行和水平制表，注意\n后面有个空格poem = """ #'''和下一行不在同一行，因此这一行有个空格\tThe lovely worldwith logic so firmly plantedcannot discern \n the needs of lovenor comprehand passion from intuitionand requires an expanation\n\t\twhere there is none."""print("-----------")print(poem)print("-----------")five = 10 - 2 + 3 - 6print(f"This should be five: &#123;five&#125;")def secret_formula(started):jelly_beans = started * 500jars = jelly_beans / 1000crates = jars / 100return jelly_beans, jars , cratesstart_point = 10000beans , jars, crates = secret_formula(start_point)print("With a staring point of: &#123;&#125;".format(start_point)) #调用方法，方法里有参数print(f"We'd have &#123;beans&#125;, &#123;jars&#125; jars, and &#123;crates&#125; crates. ")start_point = start_point / 10print("We can also do that this way:")formula = secret_formula(start_point)print("We'd have &#123;&#125; beans , &#123;&#125;jars, and &#123;&#125; crates.".format(*formula)) #因为函数有返回值 习题26 恭喜你，现在j可以考试了！12345678910111213141516171819202122232425262728293031323334353637383940print("How old are you?", end=' ')age = input()print("How tall are you?", end=' ')height = input()print("How much do you weigh?", end=' ')weight = input()print(f"So, you're &#123;age&#125; old, &#123;height&#125; tall and &#123;weight&#125; heavy.")script, filename = argvtxt = open(filenme)print("Here's your file &#123;filename&#125;:")print(tx.read())print("Type the filename again:")file_again = input("&gt; ")txt_again = open(file_again)print(txt_again_read())print('Let\'s practice everything.')print('''You\'d need to know \'bout escapeswith \\ that do \n newlines and \t tabs.''')poem = """\tThe lovely worldwith logic so firmly plantedcannot discern \n the needs of lovenor comprehend passion from intuitionand requires an explanation\n\t\twhere there is none."""print("--------------")print(poem)print("--------------") 习题27 记住逻辑关系12#and：与（既...又 全true才true#or：或（有true即true 习题28 布尔表达式练习1print(3 != 4 and not ("testing" != "test" or "Python" == "Python")) 习题29 if语句123456789101112131415161718192021222324252627#if下一行4个空格缩进#4个空格常被作为缩进排版的一个单位。缩进的确切解释并未详细指定(使用空格还是tab).Tab一定要设置为8个空格 (而非4个)。people = 20cats = 30dogs = 15if people &lt; cats: #20&lt;30? 1 打印 print("Too many cats!The world is doomed! ")if people &gt; cats: #20&gt;30? 0 print("Not many cats!The world is saved! ")if people &lt; dogs: #20&lt;15? 0 print("The world is drooled on! ")if people &gt; dogs: #20&gt;15 1 打印 print("The world is dry! ")dogs += 5 #20if people &gt;= dogs: #20&gt;=20 1 打印 print("People are greater than or equal to dogs. ")if people &lt;= dogs: #20&lt;=20 1 打印 print("People are less than or equal to dogs. ")if people == dogs: #20=20 1 打印 print("People are dogs. ") 习题30 else和if#if elif else后面都有： people = 30 cars = 40 trucks = 15 if cars &gt; people: print("We should take the cars. ") elif cars &lt; people: print("We should not take the cars. ") else: print("We can't decide. ") if trucks &gt; cars: print(" That's too many trucks. ") elif trucks &lt; cars: #if不满足看elif满不满足，而不是else（先elif再else 并列就按先后顺序来 print("Maybe we coule take the trucks. ") else: print("We still can't decide. ") if people &gt; trucks: print("Alright , let's just take the trucks. ") else: print("Fine, let's stay home then. ")]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>“笨方法”学Python 3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一言]]></title>
    <url>%2F2019%2F07%2F03%2F%E6%84%9F%E6%82%9F%2Findex%2F</url>
    <content type="text"><![CDATA[洗澡的时候粗略听完了「知乎live：如何高效阅读英文文献–毛羽立」，并浏览了作者的高赞回答： 为什么有的人好像什么都知道但现实中却一事无成？毛羽立的回答：🔗https://www.zhihu.com/question/24230372/answer/27132195 （未完待续…]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用一款实用app「duet」把iPad Pro作为Macbook Pro扩展屏]]></title>
    <url>%2F2019%2F07%2F03%2Fduet%2Findex%2F</url>
    <content type="text"><![CDATA[记得2016年左右我曾尝试用duet把iPad Air2作为Macbook的扩展屏，那时候由于duet刚在App Store推出不久且是付费软件，用户并没有太多，我的使用频率也不高。自从我把设备升级成iPad Pro和Macbook Pro后，因为这两款更新后的设备屏幕尺寸大、屏占比大，所以没有把iPad作为扩展屏的必要。 今年九月份苹果即将推出macOS Catalina以取代macOS Mojave，在新版本的系统中会增加如今duet所能实现的功能（Sidecar：Apps on macOS Catalina automatically support an expanded workspace with iPad and Apple Pencil.）。在duet变得鸡肋前，我当然是要充分高效的使（榨）用（干）它了！☃️ 实测效果VS Code和terminal分屏显示😘 屏幕保护程序aerial和duet相得益彰🧐 以上是用「duet」把iPad Pro作为Macbook Pro扩展屏的实际效果图，实测体验感极佳。iPad Pro的桌面为「桌面12」（Macbook Pro💻已创建11个桌面）：是可以把任何一个打开窗口分配到任何一个桌面中去，操作极其方便且没有学习成本。若想用iPad看长代码，则可如图直接把iPad竖屏，「duet」自动调整分辨率等。 当然在一切配置好之前也遇到了问题：无法分屏只能镜像显示。如下解决措施： 123更新mac端「duet」版本官方更新下载速度太慢且不是最新版本www.pc6.com下载2.7.4更新版本.zip]]></content>
      <categories>
        <category>好物推荐</category>
      </categories>
      <tags>
        <tag>App</tag>
        <tag>duet</tag>
        <tag>iPadPro</tag>
        <tag>MacbookPro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「TED:如何掌控你的自由时间」]]></title>
    <url>%2F2019%2F07%2F01%2FTED%E6%8E%8C%E6%8E%A7%E8%87%AA%E7%94%B1%E6%97%B6%E9%97%B4%2Findex%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>TED</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「“笨方法”学Python 3」第二篇]]></title>
    <url>%2F2019%2F07%2F01%2Fpython2%2Findex%2F</url>
    <content type="text"><![CDATA[习题11 提问12345678print("How old are you?") #可以在每行后面加end = ‘’age = input()print("How tall are you?")height = input()print("How much do you weight?")weight = input()print(f"So, you're &#123;age&#125; old , &#123;height&#125; tall and &#123;weight&#125; heavy.") 习题12 提问别人12345age = input("How old are you?") #输入提示 height = input("How tall are you?")weight = input("How much do you weigh?")print(f"So, you're &#123;age&#125; old , &#123;height&#125; tall and &#123;weight&#125; heavy.") 习题13 参数、解包和变量12345678from sys import argv #从系统导入参数 python3.7 exl13.py 中，exl13.py就是个参数script, first , second, third = input() # argv是unpack解包#不把所有的参数放到一个变量里，所以赋值给了4个变量#把argv中的东西取出，解包，将所有的参数依次赋值给左边的这些变量print("The script is called:", script)print("Your first variable is:", first)print("Your second variable is:", second)print("Your third variable is:", third) 习题14 提示和传递12345678910111213141516171819202122from sys import argvscript, user_name = argv #输入两个参数变量 解包prompt = '&gt; ' #先对prompt赋值print(f"Hi &#123;user_name&#125;, I'm the &#123;script&#125; script. ")print("I'd like to ask you a few questions.")print(f"Do you like me &#123;user_name&#125;?")likes = input(prompt) #提示输入print(f"Where do you live &#123;user_name&#125;?")lives = input(prompt)print("What kind of computer do you have? ")computer = input(prompt)print(f'''Alright, so you said &#123;likes&#125; about liking me.You live in &#123;lives&#125;. Not sure where that is.And you have a &#123;computer&#125; computer. Nice. #显示之前输入的内容''') 习题15 读取文件123456789101112131415from sys import argvscript, filename = argv #argv用来添加参数以获取文件名 filename就是打开的文件名txt = open(filename) #把文件打开并赋值给txtprint(f"Here's your file &#123;filename&#125;:") #打印文件名print(txt.read()) #打印文件内容 在txt上调用read（）函数 嘿txt执行你的read命令print("Type the filename again:")file_again = input("&gt;") #提示输入file nametxt_again = open(file_again) #把文件赋值给txt_againprint(txt_again.read()) #嘿txt_)txt_again执行你的read命令 然后print出来 习题16 读写文件123456789101112131415161718192021222324252627282930313233from sys import argvscript, filename = argvprint(f"We're going to erase &#123;filename&#125;.")print("If you don't want that, hit CTRL-C(^C). ")print("If you do want that, hit RETURN. ")input("?") #无论敲什么都会进行下面的...print("Openning the file...")target = open(filename, 'w') #w的模式打开print("Truncating the file. Goodbye! ")target.truncate() #调用truncate方法print("Now I'm going to ask you for three lines. ")line1 = input("line 1 : ")line2 = input("line 2 : ")line3 = input("line 3 : ")print("I'm going to write these to the file. ")target.write(line1) #调用write方法写入target.write("\n")target.write(line2)target.write("\n")target.write(line3)target.write("\n")print("And finally , we close it. ")target.close() #调用close方法关闭文件 习题17 更多文件操作123456789101112131415161718192021222324252627from sys import argvfrom os.path import existsscript, from_file, to_file = argv #.py test.txt new_file.txtprint(f"Copying from &#123;from_file&#125; to &#123;to_file&#125;") # f "&#123;&#125;"in_file = open(from_file) #打开要拷贝的文件并赋值给in_fileindata = in_file.read() #对...调用.read方法print(f"The input file is &#123;len(indata)&#125; bytes long") #len() 以数值形式返回传递的字符串长度print(f"Does the output file exist?&#123;exists(to_file)&#125;")print("Ready, hit RETURN to continue, CTRL_C to abort. ")input()out_file = open(to_file, 'w')out_file.write(indata)print("Alright, all done.")out_file.close()in_file.close()#bogon:lpthw Mr.Lv$ echo "This is a test file." &gt; test.txt 把“”里的内容写到text.txt里#bogon:lpthw Mr.Lv$ cat test.txt cat这个命令显示文件内容 习题18 命名、变量、代码和函数1234567891011121314151617def print_two(*args):arg1,arg2 = argsprint(f"arg1 : &#123;arg1&#125;, arg2 : &#123;arg2&#125;")def print_two_again(arg1, arg2):print(f"arg1 : &#123;arg1&#125;, arg2 : &#123;arg2&#125;")def print_one(arg1):print(f"arg1 : &#123;arg1&#125;")def print_none():print("I got nothin'.")print_two("Zed","Shaw")print_two_again( "Zed","Shaw")print_one("first!")print_none() 习题19 函数和变量12345678910111213141516171819202122def cheese_and_crackers(cheese_count, boxes_of_crackers):print(f"You have &#123;cheese_count&#125; cheeses!")print(f"You have &#123;boxes_of_crackers&#125; boxes of crackers!")print("Man that's enough for a party!")print("Get a blanket.\n")print("We can just give the function numbers directly:")cheese_and_crackers(20, 30)print("OR, we can use variable from our script")amout_of_cheese = 10amout_of_crackers = 50cheese_and_crackers(amout_of_cheese, amout_of_crackers)print("We can even do math inside too:")cheese_and_crackers(10 + 20, 5 + 6 )print("And we can combine the two, variables and math:")cheese_and_crackers(amout_of_cheese + 100, amout_of_crackers + 1000#在使用函数给参数赋值时，可以采取多种方式 习题20 函数和文件from sys import argv script, input_file = argv def print_all(f): print(f.read()) def rewind(f): f.seek(0) def print_a_line(line_count, f): print(line_count, f.readline()) current_file = open(input_file) print ("First let's print the whole file:\n") print_all(current_file) print("Now let's rewind, kind of like a tape.") rewind(current_file) print("Let's print three lines: ") current_line = 1 print_a_line(current_line, current_file) current_line = current_line + 1 print_a_line(current_line, current_file) current_line = current_line + 1 print_a_line(current_line, current_file)]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>“笨方法”学Python 3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习「“笨方法”学Python 3」第一篇]]></title>
    <url>%2F2019%2F06%2F30%2Fpython%2Findex%2F</url>
    <content type="text"><![CDATA[本文整理并记录《“笨方法”学Python3》的习题内容，除了展示原文中的代码外，还记录了我在学习过程中遇到的问题。对我来说，这本书作为Python学习的入门教材再合适不过了，照着书本敲代码 -&gt; 将运行结果与原文正确结果对照 -&gt; 进行下一个练习并重复上述过程，这样的学习过程对于初学者来说很有成就感也容易快速入门。 断断续续学习《“笨方法”学Python3》（《Learn PYTHON 3 the HARD WAY》）有一段时间了，上次集中专注学习这本书还是在百词斩实习的时候🤨（艾老师催读的工作量…安排的不够饱和哦🤣） 这本书所谓的“笨方法”是指：1、从头到尾完成每一个习题（共52个）；2、一字不差地录入每一段程序；3、让程序运行起来。 在完成项目练习即习题45~52之前，我先来简单回顾下习题1~44教会了我什么？ 习题0 准备工作习题1 第一个程序123456print("Hello World")print("I like typing this")print("This is fun")print('Yay! Printing.')print("I'd much rather you 'not'.")print('I "said" do not touch this.') 习题2 注释和#号123print("I could have code like this")#and the comment after this is ignored#You can also use a "comment --&gt; #" to disable or comment out codeprint("This will run.") 习题3 数字和数学计算123456789101112131415161718192021print("I wll now count my chickens:")#print函数，打印语句print("Hens", 25 + 30 / 6) #Hens 30(是30.0!)先算术运算符后比较运算符（包含&lt;&gt;才算比较）25+5print("Roosters", 100 - 25 * 3 % 4) #Roosters 97 (%是取余/是除法)print("Now I will count my eggs:")#print函数，打印语句print(3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6) #6.75 （/ 除出来多少就是多少）print("Is it true that 3 + 2 &lt; 5 - 7?")print(3 + 2 &lt; 5 - 7)#先算术运算符然后比较运算符 注意优先级 #0（结果是False/true）print("What is 3 + 2?", 3 + 2) # 5 直接把语句（算术）的结果打印出来print("what is 5 - 7?", 5 - 7) # -2 直接把算术语句的结果打印出来print("Oh, that's why it's False") #print函数，打印语句print("How about some more.") #print函数，打印语句print("Is it greater?", 5 &gt; -2) #1 直接把语句（比较）的结果打印出来true/falseprint("Is it greater or equal?", 5 &gt;= -2) #1print("Is it less or equal?", 5 &lt;= -2) #0 习题4 变量和命名123456789101112131415cars = 100space_in_a_car = 4.0 # 试试4.0!!!看看结果有什么不同drivers = 30passengers = 90cars_not_driven = cars - driverscars_driven = driverscarpool_ocapacity = cars_driven * space_in_a_caraverage_passengers_per_car = passengers / cars_drivenprint("There are", cars, "cars availabe.") # 100print("There are only", drivers, "drivers availabe.") # 30print("There will be ", cars_not_driven, "empty cars today.") # 70print("We can transport", carpool_ocapacity, "people today.") #120.0print("We have", passengers, "to carpool today.") # 90print("We need to put about", average_passengers_per_car,"in each car.") # 3.0 习题5 更多的变量和打印123456789101112131415name = "Zed A. Shaw" # 显然’和”都可以age = 35height = 74weight = 180eyes = 'Bule' #像这样的名称是字符串要用引号括起来teeth ='White'hair = 'Brown'print(f"Let's talk about &#123;name&#125;.")#f就是format格式化字符串的意思print(f"He's &#123;weight&#125; inches tall.")print("Actually that's not too heavy.")print(f"He's got &#123;eyes&#125; eyes and &#123;teeth&#125; depending on coffees.")total = age + height + weightprint(f"If I add &#123;age&#125; , &#123;height&#125; , and &#123;weight&#125; I get &#123;total&#125;.") 习题6 字符串和文本12345678910111213141516171819202122types_of_people = 10 #对变量赋值x = f"There are &#123;types_of_people&#125; types of people" #对变量赋值，字符串就是”值”binary = 'binary'do_not = "don't"y = f"Those who know &#123;binary&#125; and those who &#123;do_not&#125;."print(x) #打印变量（字符串）print(y)print(f"I said: &#123;x&#125;") #f-stringprint(f"I also said: '&#123;y&#125;'")hilarious = Falsejoke_evalution = "Isn't that joke funny?! &#123;&#125;" #对变量赋值，print(joke_evalution.format(hilarious))w = "This is the left side of ..." #python可以用‘和“识别出来字符串e = "a string with a right side."print(w + e) 习题7 更多打印1234567891011121314151617181920print("Mary had a litte lamb.")print("Its fleece was white as &#123;&#125;.".format('snow')) #&#123;&#125; .format()print("And everywhere that Mary went.")print("."* 10) #打印10次字符串里面的内容end1 = 'c'end2 = 'h'end3 = 'e'end4 = 'e'end5 = 's'end6 = 'e'end7 = 'B'end8 = 'u'end9 = "r"end10 = "g"end11 = "e"end12 = "r"print(end1 + end2 + end3 + end4 + end5 + end6, end = ' ') #end = ''结尾不换行；end = ’ ’结尾不换行且加一个空格print(end7 + end8 + end9 + end10 + end11 + end12) 习题8 打印，打印123456789101112formatter = "&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; "print(formatter.format(1,2,3,4)) #赋值print(formatter.format("one","two","three","four")) #赋字符串print(formatter.format(True,False,False,True)) #赋值 相当于 1 0 0 1 #True 和 False是关键字 具有相应功能print(formatter.format(formatter,formatter,formatter,formatter))print(formatter.format("Try your","Own text here","Maybe a poam","Or a song about fear"))#没有换行哦 --&gt; “”“ ””“可以换行 习题9 打印，打印，打印123456789101112days = "Mon Tue Wen Thu Fri Sat Sun"months = "Jan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"print("Here are the days: ", days)print("Here are the months: ",months)print('''There's something going on there.With the three double-quotes.We'll be able to type as much as we like.Even 4 lines if we want , or 5, or 6.''') 习题10 那是什么123456789101112131415tabby_cat = "\tI'm tabbed in." #转义序列 \t 水平制表符persian_cat = "I'm split\non a line"backslash_cat = "I'm \\ a \\ cat."fat_cat = '''I'll do a list:\t* Cat food\t* Fishes\t* Catnip\n\t* Grass'''print(tabby_cat)print(persian_cat)print(backslash_cat)print(fat_cat)]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>“笨方法”学Python 3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现Visual Studio Code界面毛玻璃效果]]></title>
    <url>%2F2019%2F06%2F20%2FVSCode%E6%AF%9B%E7%8E%BB%E7%92%83%2Findex%2F</url>
    <content type="text"><![CDATA[VSCode真的是一款强大的编程软件：它拥有众多类型的扩展和第三方库以及支持众多编程语言。在搭建并配置博客的过程中，本地静态博客的配置文件比如.yml.json.css.swig等各种格式的文件都可以用它打开并修改。如果它拥有一个更为漂亮简洁的UI界面，那势必会使生产力翻倍了！所以当我网上冲浪🏄并留意到美化VS Code界面的关键词时…!!! 本文介绍如何实现VS Code界面的毛玻璃效果~ 毛玻璃效果❌以及霓虹主题✅界面效果： 霓虹主题：代码高亮且呈现彩虹色🌈毛玻璃效果：界面半透明状态 –&gt; 类似于模糊桌面背景 霓虹主题效果： 毛玻璃效果 操作步骤下载「关键字高亮」主题插件 打开VS Code在extension扩展栏里搜索并下载扩展应用“Synthwave ‘86” VS Code设置在设置中搜索setting.json并在该文件中添加如下代码： 1terminal.integrated.rendererType": "dom" 下载Custom CSS and JS Loader插件用于自定义.css和.js文件 打开VS Code在extension扩展栏里搜索并下载扩展应用“Custom CSS and JS Loader” 毛玻璃样式配置新建custom.css文件：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899:root&#123;--vibrancy-dark: rgba(0,0,0,.2);--vibrancy-light: rgba(255,255,255,.2);&#125;html &#123;background: transparent !important;&#125;.scroll-decoration &#123;box-shadow: none !important;&#125;.minimap &#123;opacity: 0.6;background-color: transparent !important;&#125;.editor-container &#123;background: transparent !important;&#125;.search-view .search-widget .input-box, .search-view .search-widget .input-box .monaco-inputbox,.monaco-workbench&gt;.part.editor&gt;.content&gt;.one-editor-silo&gt;.container&gt;.title .tabs-container&gt;.tab,.monaco-editor-background,.monaco-editor .margin,.monaco-workbench&gt;.part&gt;.content,.monaco-workbench&gt;.editor&gt;.content&gt;.one-editor-silo.editor-one,.monaco-workbench&gt;.part.editor&gt;.content&gt;.one-editor-silo&gt;.container&gt;.title,.monaco-workbench&gt;.part&gt;.title,.monaco-workbench,.monaco-workbench&gt;.part,body &#123;background: transparent !important;&#125;.editor-group-container&gt;.tabs &#123;/* background-color: rgba(37, 37, 37,0.2) !important; */background: transparent !important;/* box-shadow: 0 1px 10px -2px gray; */&#125;.editor-group-container&gt;.tabs .tab &#123;background-color: transparent !important;&#125;.editor-group-container&gt;.tabs .tab.active * &#123;color: #fff !important;background-color: transparent !important;&#125;.monaco-list.settings-toc-tree .monaco-list-row.focused &#123;outline-color: rgb(37, 37, 37,0.6) !important;&#125;.monaco-list.settings-toc-tree .monaco-list-row.selected,.monaco-list.settings-toc-tree .monaco-list-row.focused,.monaco-list .monaco-list-row.selected,.monaco-list.settings-toc-tree:not(.drop-target) .monaco-list-row:hover:not(.selected):not(.focused) &#123;/* background-color: rgb(37, 37, 37,0.6) !important; */color: #00aaee;&#125;.monaco-list.settings-editor-tree .monaco-list-row &#123;background-color: transparent !important;outline-color: transparent !important;&#125;.monaco-inputbox &#123;background-color: rgba(41, 41, 41,0.2) !important;&#125;.monaco-editor .selected-text &#123;background-color: rgba(58, 61, 65,0.6) !important;&#125;.monaco-editor .focused .selected-text &#123;background-color: rgba(38, 79, 120,0.6) !important;&#125;.monaco-editor .view-overlays .current-line &#123;border-color: rgba(41, 41, 41,0.2) !important;&#125;.extension-editor,.monaco-inputbox&gt;.wrapper&gt;.input,.monaco-workbench&gt;.part.editor&gt;.content&gt;.one-editor-silo&gt;.container&gt;.title .tabs-container&gt;.tab.active,.preferences-editor&gt;.preferences-header,.preferences-editor&gt;.preferences-editors-container.side-by-side-preferences-editor .preferences-header-container,.monaco-editor, .monaco-editor .inputarea.ime-input &#123;background: transparent !important;&#125;.editor-group-container&gt;.tabs .tab &#123;border: none !important;&#125;.panel.integrated-terminal,.panel.integrated-terminal *&#123;background: transparent !important;&#125; 新建custom.js文件1nodeRequire('electron').remote.getCurrentWindow().setVibrancy('ultra-dark'); VS Code设置在setting.json中添加如下代码： 12345"vscode_custom_css.imports": ["file:///Users/MyUserName/Documents/custom.css",//注意确定好文件路径"file:///Users/MyUserName/Documents/custom.js" //注意确定好文件路径],"vscode_custom_css.policy": true 执行配置操作在VS Code中执行命令（Commond+Shift+P）： 1Reload Custom CSS and JS 然后在右下角弹出的对话框里选择Restart Visual Studio Code。 ⚠️目前经过多次尝试，设置霓虹主题成功但开启毛玻璃效果失败：在以上所有操作结束后应该 出现正确效果，但我的界面弹出Code已损坏请重新下载。🚫注意！！！Mac OS端可以实现以上效果，Windows端不可以。]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在前面]]></title>
    <url>%2F2019%2F06%2F15%2FAboutMyblog%2Findex%2F</url>
    <content type="text"><![CDATA[基于 hexo &amp; github 搭建个人博客👀 1、🔧本地部署博客 ✅6.15方所 青柠玫瑰茶（超级难喝🙁 2、⛏远程部署到 ✅6.17伊藤洋华堂Starbucks 西柚雪伯爵（超级好喝🙂 待办清单解析网站域名 &amp; 跳转1www.lumos.net.cn✅6.18 默认网址: https://lumos0314.github.io/ 配置NexT界面环境12345678910111213141516171819202122232425语言🇨🇳✅6.18文件夹分类📂✅6.18添加微信✅6.20打赏功能✅6.20添加标签Tag✅6.20（添加多个标签✅7.7）回到顶部按钮➕阅读百分比✅7.1添加「标签」页面✅7.7添加「分类」页面✅7.7添加「公益404」页面✅7.7添加图片内容✅7.8添加网站访问统计✅7.8增加站内🔍搜索功能✅7.8添加文章评论功能侧边栏➕头像✅7.8侧边栏➕链接✅7.7隐藏底部logo✅7.8页面layout右上角添加ForkMeOnGithub✅7.9添加页面动画live2d✅7.8（页面适当位置调整✅）点击出现💕特殊效果✅7.9网页动态效果🐻✅7.9增加「博文置顶」功能并添加置顶🔝符号✅7.11优化加载速度（使用gulp对博文中的js、css、img等文件进行压缩✅7.11添加网易云音乐外链🔗✅7.11更改网站图标✅7.11(Chrome浏览器可显示更改图标)网站内容可在百度谷歌上搜索🔍 More to do: 上传速度太慢~ 发布新文章12345「关于我」专栏写作✅7.11Intresting things OS X/Mac/Apps✅6.30Fine ArtsPhotograghs More to do: Invite 👬 to add some articles 尝试不同主题12landscapeGithub自带的主题 More to do: Github – NexT配置]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>概述</tag>
      </tags>
  </entry>
</search>
